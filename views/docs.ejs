<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Book Store API Documentation</title>
    <link rel="stylesheet" href="/style/main.css" />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=Roboto+Mono&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
    />
  </head>
  <body>
    <div class="docs-container">
      <a href="/" class="back-button">
        <i class="fas fa-arrow-left"></i> Back to Home
      </a>

      <h1>Book Store API Documentation</h1>

      <div class="repo-info">
        <h2>Repository Information</h2>
        <p>
          <strong>GitHub Repository:</strong>
          <a
            href="https://github.com/CodeByHossam/bookstoreAPI"
            target="_blank"
            class="repo-link"
          >
            <i class="fab fa-github"></i>
            CodeByHossam/bookstoreAPI
          </a>
        </p>
        <div class="repo-links">
          <a
            href="https://github.com/CodeByHossam/bookstoreAPI/stargazers"
            target="_blank"
            class="repo-link"
          >
            <i class="fas fa-star"></i>
            Stars
          </a>
          <a
            href="https://github.com/CodeByHossam/bookstoreAPI/forks"
            target="_blank"
            class="repo-link"
          >
            <i class="fas fa-code-branch"></i>
            Forks
          </a>
          <a
            href="https://github.com/CodeByHossam/bookstoreAPI/blob/main/LICENSE"
            target="_blank"
            class="repo-link"
          >
            <i class="fas fa-balance-scale"></i>
            License
          </a>
        </div>
        <div class="author-info">
          <strong>Author:</strong>
          <a
            href="https://github.com/CodeByHossam"
            target="_blank"
            class="repo-link"
          >
            <i class="fas fa-user"></i>
            Hossam
          </a>
        </div>
      </div>

      <div class="repo-info">
        <h2>Getting Started</h2>
        <h3>Prerequisites</h3>
        <ul>
          <li>Node.js (v14 or higher)</li>
          <li>npm (v6 or higher)</li>
          <li>MongoDB (v4.4 or higher)</li>
        </ul>

        <h3>Installation</h3>
        <ol>
          <li>
            Clone the repository:
            <pre><code>git clone https://github.com/CodeByHossam/bookstoreAPI.git
cd bookstoreAPI</code></pre>
          </li>
          <li>
            Install dependencies:
            <pre><code>npm install</code></pre>
          </li>
          <li>
            Configure environment variables:
            <p>
              Create a `.env` file in the root directory with the following
              variables:
            </p>
            <pre><code># Server Configuration
PORT=5000
NODE_ENV=development

# Database Configuration
MONGODB_URI=mongodb://localhost:27017/bookstore

# Security
JWT_SECRET=your_very_secure_jwt_secret_key
ADMIN_PASSWORD=your_secure_admin_password

# Email Configuration
EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_email_app_password
FRONTEND_URL=http://localhost:3000</code></pre>

            <h4>Example with Sample Values</h4>
            <pre><code># Server Configuration
PORT=5000
NODE_ENV=development

# Database Configuration
MONGODB_URI=mongodb://localhost:27017/bookstore

# Security
JWT_SECRET=mysecretkey123456789
ADMIN_PASSWORD=Admin@123456

# Email Configuration
EMAIL_USER=yourname@gmail.com
EMAIL_PASS=abcd efgh ijkl mnop
FRONTEND_URL=http://localhost:3000</code></pre>
          </li>
        </ol>

        <h3>Starting the Server</h3>
        <p>For development:</p>
        <pre><code>npm run dev</code></pre>
        <p>For production:</p>
        <pre><code>npm start</code></pre>

        <div class="note">
          <strong>Important Notes:</strong>
          <ul>
            <li>Make sure MongoDB is running before starting the server</li>
            <li>Keep your JWT_SECRET and ADMIN_PASSWORD secure</li>
            <li>
              For Gmail, use an App Password instead of your regular password
            </li>
            <li>Replace all values with your actual configuration</li>
          </ul>
        </div>
      </div>

      <h2>API Base URLs</h2>
      <p>You can access the API using either of these base URLs:</p>
      <ul>
        <li>
          <strong>Local Development:</strong>
          <code>http://localhost:5000</code>
        </li>
        <li>
          <strong>Production:</strong>
          <code>https://book-store-api-6pr7.onrender.com</code>
        </li>
      </ul>

      <p><strong>Example:</strong> To get all books, use either:</p>
      <ul>
        <li>Local: <code>http://localhost:5000/books</code></li>
        <li>
          Production:
          <code>https://book-store-api-6pr7.onrender.com/books</code>
        </li>
      </ul>

      <h2>Available Endpoints</h2>
      <table>
        <thead>
          <tr>
            <th>Method</th>
            <th>Endpoint</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <!-- Books Endpoints -->
          <tr>
            <td><span class="method get">GET</span></td>
            <td>/books</td>
            <td>Get all books</td>
          </tr>
          <tr>
            <td><span class="method get">GET</span></td>
            <td>/books/:id</td>
            <td>Get a specific book by ID</td>
          </tr>
          <tr>
            <td><span class="method post">POST</span></td>
            <td>/books</td>
            <td>Create a new book</td>
          </tr>
          <tr>
            <td><span class="method put">PUT</span></td>
            <td>/books/:id</td>
            <td>Update a book by ID</td>
          </tr>
          <tr>
            <td><span class="method delete">DELETE</span></td>
            <td>/books/:id</td>
            <td>Delete a book by ID</td>
          </tr>

          <!-- Authors Endpoints -->
          <tr>
            <td><span class="method get">GET</span></td>
            <td>/authors</td>
            <td>Get all authors</td>
          </tr>
          <tr>
            <td><span class="method get">GET</span></td>
            <td>/authors/:id</td>
            <td>Get a specific author by ID</td>
          </tr>
          <tr>
            <td><span class="method post">POST</span></td>
            <td>/authors</td>
            <td>Create a new author</td>
          </tr>
          <tr>
            <td><span class="method put">PUT</span></td>
            <td>/authors/:id</td>
            <td>Update an author by ID</td>
          </tr>
          <tr>
            <td><span class="method delete">DELETE</span></td>
            <td>/authors/:id</td>
            <td>Delete an author by ID</td>
          </tr>

          <!-- User Endpoints -->
          <tr>
            <td><span class="method get">GET</span></td>
            <td>/user</td>
            <td>Get all users</td>
          </tr>
          <tr>
            <td><span class="method get">GET</span></td>
            <td>/user/:id</td>
            <td>Get a specific user by ID</td>
          </tr>
          <tr>
            <td><span class="method post">POST</span></td>
            <td>/user/register</td>
            <td>Register a new user</td>
          </tr>
          <tr>
            <td><span class="method post">POST</span></td>
            <td>/user/login</td>
            <td>Login user</td>
          </tr>
          <tr>
            <td><span class="method put">PUT</span></td>
            <td>/user/:id</td>
            <td>Update a user by ID</td>
          </tr>
          <tr>
            <td><span class="method delete">DELETE</span></td>
            <td>/user/:id</td>
            <td>Delete a user by ID</td>
          </tr>

          <!-- Password Reset Endpoints -->
          <tr>
            <td><span class="method get">GET</span></td>
            <td>/password/forgot</td>
            <td>Show forgot password form</td>
          </tr>
          <tr>
            <td><span class="method post">POST</span></td>
            <td>/password/reset</td>
            <td>Send password reset link</td>
          </tr>
          <tr>
            <td><span class="method get">GET</span></td>
            <td>/password/reset-password/:id/:token</td>
            <td>Show reset password form</td>
          </tr>
          <tr>
            <td><span class="method post">POST</span></td>
            <td>/password/password-sucess</td>
            <td>Handle password reset</td>
          </tr>

          <!-- Image Upload Endpoint -->
          <tr>
            <td><span class="method post">POST</span></td>
            <td>/upload</td>
            <td>Upload an image (form-data with 'photo' field)</td>
          </tr>
        </tbody>
      </table>

      <h2>Database Seeding</h2>
      <p>
        The database seeder (`dataSeeder.js`) populates the database with sample
        data for testing and development purposes. It creates:
      </p>
      <ul>
        <li>6 famous authors with their details</li>
        <li>6 classic books with their details</li>
        <li>6 users (1 admin and 5 regular users)</li>
      </ul>

      <h3>Sample Data</h3>
      <p>The seeder includes:</p>
      <ul>
        <li>6 Famous Authors with detailed information</li>
        <li>6 Classic Books with complete details</li>
        <li>Proper relationships between authors and books</li>
        <li>Pre-configured users for testing</li>
      </ul>

      <h3>Default Users</h3>
      <p>The seeder creates the following users for testing:</p>

      <h4>Admin User</h4>
      <ul>
        <li>Name: Admin</li>
        <li>Email: admin@email.com</li>
        <li>Password: Set in .env file (ADMIN_PASSWORD)</li>
        <li>Admin Status: Yes (isAdmin: true)</li>
      </ul>

      <h4>Regular Users</h4>
      <ul>
        <li>John Doe (john@email.com)</li>
        <li>Jane Smith (jane@email.com)</li>
        <li>Bob Wilson (bob@email.com)</li>
        <li>Alice Brown (alice@email.com)</li>
        <li>Charlie Davis (charlie@email.com)</li>
      </ul>
      <p><strong>Note:</strong> All regular users have the password: 123456</p>

      <div class="note">
        <strong>Important:</strong> Make sure to set the ADMIN_PASSWORD in your
        .env file before running the seeder. This password will be used for the
        admin user (admin@email.com).
      </div>

      <h3>How to Seed the Database</h3>
      <p>
        To seed the database with sample data, run the following command in your
        terminal:
      </p>
      <pre><code>node dataSeeder.js</code></pre>

      <p>The seeder will:</p>
      <ol>
        <li>Connect to your MongoDB database</li>
        <li>Clean existing data (delete all authors, books, and users)</li>
        <li>Create the default users (1 admin + 5 regular users)</li>
        <li>Insert the sample authors</li>
        <li>Create books with references to the authors</li>
      </ol>

      <p>You should see the following output if successful:</p>
      <pre><code>🧹 Cleaning existing data...
👤 Creating users...
✅ Created 6 users
👥 Creating authors...
✅ Created 6 authors
📚 Creating books...
✅ Created 6 books
✨ Database seeding completed successfully!

Default Users Created:
----------------------
Admin User:
Email: admin@email.com
Password: Set in .env file (ADMIN_PASSWORD)

Regular Users:
Email: john@email.com, jane@email.com, bob@email.com
Email: alice@email.com, charlie@email.com
Password for all users: 123456</code></pre>

      <div class="note">
        <strong>Important Notes:</strong>
        <ul>
          <li>
            Make sure your MongoDB connection string is properly set in your
            .env file before running the seeder.
          </li>
          <li>
            These default passwords should be changed in a production
            environment.
          </li>
          <li>
            The admin user has full access to all features of the application.
          </li>
          <li>Regular users have limited access based on their permissions.</li>
        </ul>
      </div>

      <!-- Add new Postman Testing Section -->
      <section id="postman-testing" class="testing-section">
        <h2>Postman Testing Guide</h2>

        <div class="test-setup">
          <h3>Postman Setup</h3>
          <ol>
            <li>Create a new Collection: "Bookstore API Tests"</li>
            <li>
              Set up Environment Variables:
              <pre><code>baseUrl: http://localhost:5000
regularToken: (leave empty)
adminToken: (leave empty)
bookId: (leave empty)
userId: (leave empty)</code></pre>
            </li>
          </ol>
        </div>

        <div class="test-cases">
          <h3>Test Cases</h3>

          <div class="test-case">
            <h4>1. User Registration Tests</h4>

            <div class="endpoint">
              <h5>1.1 Regular User Registration</h5>
              <ul>
                <li><strong>Method:</strong> POST</li>
                <li><strong>URL:</strong> {{ baseUrl }}/user/register</li>
                <li>
                  <strong>Headers:</strong> Content-Type: application/json
                </li>
                <li>
                  <strong>Body:</strong>
                  <pre><code>{
    "name": "Test User",
    "email": "test@example.com",
    "password": "your_secure_password_here"
  }</code></pre>
                </li>
                <li>
                  <strong>Expected Response (201):</strong>
                  <pre><code>{
    "success": true,
    "data": {
      "name": "Test User",
      "email": "test@example.com",
      "isAdmin": false,
      "_id": "user_id_here"
    }
  }</code></pre>
                </li>
              </ul>
            </div>

            <div class="endpoint">
              <h5>1.2 Admin User Registration</h5>
              <ul>
                <li><strong>Method:</strong> POST</li>
                <li><strong>URL:</strong> {{ baseUrl }}/user/register</li>
                <li>
                  <strong>Headers:</strong>
                  <ul>
                    <li>Content-Type: application/json</li>
                    <li>Authorization: Bearer {{ adminToken }}</li>
                  </ul>
                </li>
                <li>
                  <strong>Body:</strong>
                  <pre><code>{
    "name": "New Admin",
    "email": "newadmin@example.com",
    "password": "your_secure_admin_password_here",
    "isAdmin": true
  }</code></pre>
                </li>
              </ul>
            </div>
          </div>

          <div class="test-case">
            <h4>2. Authentication Tests</h4>

            <div class="endpoint">
              <h5>2.1 Regular User Login</h5>
              <ul>
                <li><strong>Method:</strong> POST</li>
                <li><strong>URL:</strong> {{ baseUrl }}/user/login</li>
                <li>
                  <strong>Headers:</strong> Content-Type: application/json
                </li>
                <li>
                  <strong>Body:</strong>
                  <pre><code>{
    "email": "test@example.com",
    "password": "your_secure_password_here"
  }</code></pre>
                </li>
              </ul>
            </div>
          </div>

          <div class="test-case">
            <h4>3. Book Management Tests</h4>

            <div class="endpoint">
              <h5>3.1 Add New Book (Admin)</h5>
              <ul>
                <li><strong>Method:</strong> POST</li>
                <li><strong>URL:</strong> {{ baseUrl }}/book/add</li>
                <li>
                  <strong>Headers:</strong>
                  <ul>
                    <li>Content-Type: application/json</li>
                    <li>Authorization: Bearer {{ adminToken }}</li>
                  </ul>
                </li>
                <li>
                  <strong>Body:</strong>
                  <pre><code>{
    "title": "Test Book",
    "author": "Test Author",
    "description": "Test Description",
    "price": 29.99,
    "category": "Fiction",
    "stock": 100
  }</code></pre>
                </li>
              </ul>
            </div>
          </div>
        </div>

        <div class="test-instructions">
          <h3>Test Execution Instructions</h3>
          <ol>
            <li>Set up your environment variables in Postman</li>
            <li>
              Run tests in sequence as they may depend on previous test results
            </li>
            <li>Save test data IDs (user_id, book_id) for subsequent tests</li>
            <li>Clean up test data after completion</li>
            <li>Document any failures or unexpected behavior</li>
          </ol>
        </div>

        <div class="best-practices">
          <h3>Best Practices</h3>
          <ul>
            <li>Always use environment variables for sensitive data</li>
            <li>Clean up test data after each test suite</li>
            <li>Test both success and failure scenarios</li>
            <li>Verify response status codes and data structures</li>
            <li>Test rate limiting and security measures</li>
            <li>Document any API changes that affect tests</li>
          </ul>
        </div>
      </section>
    </div>

    <style>
      .testing-section {
        margin-top: 2rem;
        padding: 2rem;
        background: #f8f9fa;
        border-radius: 8px;
      }

      .test-case {
        margin: 1.5rem 0;
        padding: 1rem;
        background: white;
        border-radius: 4px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      }

      .endpoint {
        margin: 1rem 0;
        padding: 1rem;
        border-left: 4px solid #007bff;
      }

      pre {
        background: #f1f1f1;
        padding: 1rem;
        border-radius: 4px;
        overflow-x: auto;
      }

      code {
        font-family: "Roboto Mono", monospace;
      }

      h3,
      h4,
      h5 {
        margin-top: 1.5rem;
        color: #2c3e50;
      }

      ul,
      ol {
        margin-left: 1.5rem;
      }

      .test-instructions,
      .best-practices {
        margin-top: 2rem;
        padding: 1rem;
        background: white;
        border-radius: 4px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      }
    </style>
  </body>
</html>
